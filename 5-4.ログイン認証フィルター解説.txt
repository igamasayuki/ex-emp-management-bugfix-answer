ログイン認証フィルターに必要なクラスやメソッドなど

SpringSecurityを導入する方法
○build.gradleに以下の記述を追加
dependencies {
		：
	implementation 'org.springframework.boot:spring-boot-starter-security'
		：
}
		
○設定情報保持クラス
　SecurityConfigクラス
　　・・・ログイン認証用の設定クラスを参照のこと

○ドメイン
　LoginAdministratorクラス
　　・・・Administratorドメインに権限(ロール)情報が付与されたドメイン

○サービスクラス
　AdministratorDetailsServiceImplクラス
　　・・・ログイン後のメンバー情報に権限情報を付与するサービスクラス
　　　　　ログイン時、Springから自動で呼ばれる


============================================================
○TMLでログイン情報を取得する方法
○build.gradleに以下の記述を追加
dependencies {
		：
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
		：
}


○htmlでの記述
<html lang="ja"
	xmlns:th="http://www.thymeleaf.org"
	xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
	
	以下のようにすると権限毎に表示を変えることができる
	
	<!-- 管理者の人だけ表示 -->
	<span sec:authorize="hasRole('ROLE_ADMIN')"><a href="/admin">Admin</a></span>
	<span sec:authorize="hasRole('ROLE_USER')"><a href="/user">User</a></span>
	<!-- ログインしている人だけ表示 -->
	<span sec:authorize="isAuthenticated()">
		<span sec:authentication="principal.administrator.name">山田</span>さんこんにちは！
	</span>
	<!-- ログインしていない人だけ表示 -->
	<span sec:authorize="!isAuthenticated()"><a href="/login">ログイン</a></span>

============================================================
○コントローラでログイン情報を取得する方法
　→EmployeeControllerクラスのshowListメソッド
	@RequestMapping("/showList")
	public String showList(Model model
			, @AuthenticationPrincipal LoginAdministrator loginAdministrator) {
		
		// ログイン情報をコントローラで取得するサンプル
		System.out.println(loginAdministrator.getAdministrator().getName() + "さんがログイン中");

============================================================
○CSRF対策
	<form th:object="${insertEmployeeForm}">を使用すると　
	以下のようにCSRF対策用のトークンが自動的にhiddenに埋め込まれ、
	裏側でトークンチェックをしてくれるのでCSRF対策が自動で行われる
	
	<input type="hidden" name="_csrf" value="951b7049-1919-40ce-b0bd-e06e2f37e24a"/>