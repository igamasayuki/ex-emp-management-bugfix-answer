従業員登録

○insert.html 従業員登録画面

<form method="post" action="list.html" 
	th:action="@{/employee/insert}" 
	th:object="${insertEmployeeForm}" 
	enctype="multipart/form-data">

※enctype="multipart/form-data"を忘れずに

  <tr>
    <th nowrap>
      写真
    </th>
    <td>
		<label th:errors="*{imageFile}" class="error-messages">
			写真を選択してください
		</label>
		<input name="imageFile" type="file" accept=".jpg,.png,image/jpeg,image/png" th:errorclass="error-input"/>
    </td>
  </tr>

　　 ※<input type="file" ・・・>を使用する
 
 
 ○InsertEmployeeFormクラス
 
 	/** 画像 */
	private MultipartFile imageFile;
	
	※ファイルはMultipartFile型で受け取ることが可能です
	
	MultipartFileクラスのtransferTo(Path dest)を使えば画像を保存できそうだが、SpringBootの環境だと何故か動かない(仕様？バグ？サーブレットの時は動いていた)
	https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/multipart/MultipartFile.html#transferTo-java.nio.file.Path-
 
 　　そのため違う方法で実装を行っています。
 
 ===========================================
 画像ファイルはBase64形式に変換してDBに保存する方法
 ===========================================
 ○EmployeeServiceの insert()メソッド
 
	/**
	 * 従業員情報を登録します.<br>
	 * 画像ファイルはBase64形式に変換します。
	 * 
	 * @param employee　登録した従業員情報
	 */
	public Employee insert(InsertEmployeeForm form, String fileExtension) throws IOException {
		
		Employee employee = new Employee();
		BeanUtils.copyProperties(form, employee);

		// 画像ファイルをBase64形式にエンコード
		String base64FileString = Base64.getEncoder().encodeToString(form.getImageFile().getBytes());
		if ("jpg".equals(fileExtension)) {
			base64FileString = "data:image/jpeg;base64," + base64FileString;
		} else if ("png".equals(fileExtension)) {
			base64FileString = "data:image/png;base64," + base64FileString;
		}
		employee.setImage(base64FileString);
		
		return employeeRepository.insert(employee);
	}


○detail.html 従業員情報表示
　
<img  th:src="${employee.image}" />


○EmployeeRepositoryのinsert()メソッド　排他制御

	/**
	 * 従業員情報を登録します.
	 * <pre>
	 * このメソッドでは、IDをプログラムで採番しています。
	 * ・従業員テーブルから重複しないIDを取ってくる
	 * ・取ってきたIDを使ってインサートする
	 * これを別スレッドに移ることなく確実に処理するためにsynchronizedをつけています。
	 * </pre>
	 * @param employee 従業員情報
	 * @return インサートした従業員情報
	 */
	synchronized public Employee insert(Employee employee) {
		// IDの採番
		employee.setId(getPrimaryId());
		
		SqlParameterSource param = new BeanPropertySqlParameterSource(employee);

		// インサート処理
		String insertSql = "INSERT INTO employees(id,name,image,gender,hire_date,mail_address,zip_code,address,telephone,salary,characteristics,dependents_count) "
				+ " VALUES(:id,:name,:image,:gender,:hireDate,:mailAddress,:zipCode,:address,:telephone,:salary,:characteristics,:dependentsCount)";
		template.update(insertSql, param);

		return employee;
	}

===========================================
MultipartFileクラスのtransferTo(Path dest)を使わずに画像ファイルをサーバーに保存する方法
===========================================

	Employee employee = new Employee();
	BeanUtils.copyProperties(insertEmployeeForm, employee);
	employee.setHireDate(Date.valueOf(insertEmployeeForm.getHireDate()));
	employee.setImage(insertEmployeeForm.getImage().getOriginalFilename());

	String path = EmployeeController.class.getResource("/static").getFile() + "/img";
	path = path.substring(1);
	try {
		Files.copy(insertEmployeeForm.getImage().getInputStream(),
				Paths.get(path, insertEmployeeForm.getImage().getOriginalFilename()));
	} catch (Exception e) {
		e.printStackTrace();
		result.rejectValue("image", "xxxxx", new Object[] { 50000 }, "ファイルのアップロードに失敗しました。もう一度お試しください。");
		return "employee/insert";
	}

	employeeService.register(employee);