・暗号化・・・可逆変換　（暗号化したら複合して元に戻せる）
・ハッシュ化・・・不可逆変換　（ハッシュ化したら元に戻せない）

パスワードはハッシュ化してDBに保存する

パスワードハッシュ化
○build.gradleに以下の記述を追加
dependencies {
		：
	implementation 'org.springframework.boot:spring-boot-starter-security'
		：
}

○SecurityConfig.javaを以下のように作成する

@Configuration
public class SecurityConfig {
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		// SpringSecurityを導入すると毎回アクセス時にSpringがログイン画面を出してしまう
		// 下記の設定は全てのパスをログインしなくてもアクセスできるようにする設定
		
		http.authorizeHttpRequests(authz -> authz.requestMatchers(“/**“).permitAll());
		または
		http.authorizeHttpRequests().requestMatchers("/**").permitAll();
		
		return http.build();
	}
	
	 /**
	  * <pre>
	  * bcryptアルゴリズムでハッシュ化する実装を返します.
	  * これを指定することでパスワード暗号化やマッチ確認する際に
	  * @Autowired
	  * private PasswordEncoder passwordEncoder;
	  * と記載するとDIされるようになります。
	  * </pre>
	  * @return bcryptアルゴリズムで暗号化する実装オブジェクト
	  */
	 @Bean
	 PasswordEncoder passwordEncoder() {
	     return new BCryptPasswordEncoder();
	 }
}

○AdministratorService

	@Autowired
	private PasswordEncoder passwordEncoder;

	/**
	 * 管理者情報を登録します.
	 * パスワードはここでハッシュ化されます
	 * 
	 * @param administrator　管理者情報
	 */
	public void insert(Administrator administrator) {
	  
	  // パスワードをハッシュ化
	  administrator.setPassword(passwordEncoder.encode(administrator.getPassword()));
	  
	  administratorRepository.insert(administrator);
	}


	/**
	 * ログインをします.
	 *
	 * @param mailAddress メールアドレス
	 * @param password    パスワード
	 * @return 管理者情報 存在しない場合またはパスワードが不一致だった場合はnullが返ります
	 */
	public Administrator login(String mailAddress, String passward) {
		Administrator administrator = administratorRepository.findByMailAddress(mailAddress);
		// 対象の管理者がいない場合はnullを返す
		if (administrator == null) {
			return null;
		}
		// パスワードが不一致だった場合はnullを返す
		if (!passwordEncoder.matches(passward, administrator.getPassword())) {
			return null;
		}
		
		return administrator;
	}